/*
*******************************************************************************
* Copyright (C) 2015, International Business Machines Corporation. 
* All Rights Reserved. *
*******************************************************************************
*/
namespace com.ibm.streamsx.plumbing.sample.switches ;

use com.ibm.streamsx.plumbing.switches::* ;

public composite ControlledSwitchSample
{
	graph
		() as JCP = JobControlPlane()
		{
		}

		// DataFlow with controlled switch
		@spl_category(name = "data")
		() as DF = DataFlow()
		{
		}

		// Flow that controls DataFlow
		// Note they are not connected using streams,
		// only indirectly through the control mechanisms
		// provided by JobControlPlane
		@spl_note(id = "0", text =
			"Flow that controls DataFlow by opening and closing the switch.")
		@spl_category(name = "control")
		() as CF = ControlFlow()
		{
		}

}

/**
* The data flow that will demonstrate use
* of `ControlledSwitch`. A Beacon
* operator submits tuples around 100 per second
* through a [com.ibm.streamsx.plumbing.switches::ControlledSwitch] and out to a sink operator.
* Using Streams Studio or the Streams Console you can
* watch the rate of tuples into the sink operator change
* based upon the control signals from the separate
* [ControlFlow] composite.
*/
composite DataFlow
{
	graph
		stream<int64 a> Data = Beacon()
		{
			param
				period : 0.01 ;
		}

		stream<Data> ManagedData = ControlledSwitch(Data)
		{
			param
				name : "sampleSwitch" ;
                                initialState : true;
		}

		() as Sink = Custom(ManagedData)
		{
		}

}

/**
* The flow that controls [DataFlow] in [ControlledSwitchSample].
* Every twenty seconds a random value between 0.0 and 1.0
* is submitted by a `Beacon`. If it is less that 0.3 the switch
* is closed otherwise it is opened.
*/
composite ControlFlow()
{
	graph
		stream<float64 rv> Control = Beacon()
		{
			param
				initDelay : 10.0 ;
				period : 20.0 ;
			output
				Control : rv = random() ;
		}

		() as ChangeShedding = Custom(Control)
		{
			logic
				state :
				{
					boolean __unused = registerSwitch("sampleSwitch", true ) ;
				}

				onTuple Control :
				{
					setSwitchState("sampleSwitch", rv >= 0.3) ;
				}
			}

}
